openapi: 3.0.0
info:
  title: Haffa
  description: Haffa
  version: 1.0.0
paths:
  /api/v1/haffa/graphql:
    post:
      operationId: haffaGQL
      summary: 'GraphQL endpoint for Haffa'
      tags:
        - GraphQL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GraphQLQuery'
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphQLResponse'

  /api/v1/haffa/auth/verify-token:
    post:
      operationId: verifyToken
      summary: Verify authentication token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Successful processing of request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'

  /api/v1/haffa/auth/request-pincode:
    post:
      operationId: requestPincode
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Successful processing of request
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    type: string
                    enum:
                      - accepted
                      - denied
                      - invalid

  /api/v1/haffa/auth/login:
    post:
      operationId: login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - pincode
              properties:
                email:
                  type: string
                pincode:
                  type: string
      responses:
        '200':
          description: Successful processing of request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'

  /api/v1/haffa/auth/signout:
    post:
      operationId: signout
      tags:
        - Authentication
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful processing of request
          content:
            application/json:
              schema:
                type: object

  /api/v1/haffa/auth/effective-permissions:
    post:
      operationId: effectivePermissions
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Successful processing of request
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                  - canLogin
                  - roles
                properties:
                  email:
                    type: string
                  canLogin:
                    type: boolean
                  roles:
                    type: array
                    items:
                      type: string

  /api/v1/haffa/options/{collection}:
    parameters:
      - in: path
        name: collection
        schema:
          type: string
        required: true
        description: Name of collection
    post:
      operationId: options
      tags:
        - Configuration
      summary: Get key/value pairs
      responses:
        '200':
          description: Successful processing of request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options'

  /api/v1/haffa/system-settings:
    post:
      operationId: systemSettings
      tags:
        - Configuration
      summary: Get key/value pairs
      responses:
        '200':
          description: Successful processing of request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options'

  /api/v1/{namespace}/healthcheck:
    get:
      operationId: healthCheck
      summary: 'Healthcheck of service'
      tags:
        - Status of Operations
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Service is healthy'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string

  /api/v1/{namespace}/snapshot/{collection}:
    get:
      operationId: snapshot
      summary: Download snapshot
      tags:
        - DevOps
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'JSON snapshot of collection'
          content:
            application/json:
              schema:
                type: object
    patch:
      operationId: importSnapshot
      summary: Update instance with data from snapshot if not already present
      tags:
        - DevOps
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Operation status'
          content:
            application/json:
              schema:
                type: object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /api/v1/{namespace}/social-preview/advert/{advertId}:
    get:
      operationId: 'advertSocialPreview'
      summary: Get social preview data for advert
      tags:
        - Content
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: advertId
          in: path
          required: true
          schema:
            type: string
      responses:
        404:
          description: 'Advert was not found'
        200:
          description: 'Social preview data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialPreview'

  /api/v1/labels/{advertIds}:
    get:
      operationId: 'advertLabels'
      summary: Get PDF labels for advert(s)
      tags:
        - Configuration
      parameters:
        - name: advertIds
          in: path
          required: true
          schema:
            type: string
      responses:
        404:
          description: 'Advert was not found'
        200:
          description: 'PDF file'
          content:
            application/pdf:
              schema:
                type: string
                format: binary

components:
  schemas:
    GraphQLQuery:
      type: object
      required:
        - query
      properties:
        query:
          type: string
        parameters:
          type: object
    GraphQLResponse:
      type: object
      properties:
        data:
          type: object
    TokenResponse:
      type: object
      required:
        - token
        - roles
      properties:
        token:
          type: string
        guest:
          type: boolean
        roles:
          type: array
          items:
            type: string
    Options:
      type: array
      items:
        type: object
        required:
          - key
          - value
        properties:
          key:
            type: string
          value:
            type: string
    SocialPreview:
      type: object
      required:
        - title
        - description
        - imageUrl
      properties:
        title:
          type: string
        description:
          type: string
        imageUrl:
          type: string
